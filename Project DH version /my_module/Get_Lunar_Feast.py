import datetime

get_lunar_day = (
    0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, #1901 
    0x96, 0xA4, 0x96, 0x96, 0x97, 0x87, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78, #1902 
    0x96, 0xA5, 0x87, 0x96, 0x87, 0x87, 0x79, 0x69, 0x69, 0x69, 0x78, 0x78, #1903 
    0x86, 0xA5, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x78, 0x87, #1904 
    0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, #1905 
    0x96, 0xA4, 0x96, 0x96, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78, #1906 
    0x96, 0xA5, 0x87, 0x96, 0x87, 0x87, 0x79, 0x69, 0x69, 0x69, 0x78, 0x78, #1907 
    0x86, 0xA5, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, #1908 
    0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, #1909 
    0x96, 0xA4, 0x96, 0x96, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78, #1910 
    0x96, 0xA5, 0x87, 0x96, 0x87, 0x87, 0x79, 0x69, 0x69, 0x69, 0x78, 0x78, #1911 
    0x86, 0xA5, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, #1912 
    0x95, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, #1913 
    0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78, #1914 
    0x96, 0xA5, 0x97, 0x96, 0x97, 0x87, 0x79, 0x79, 0x69, 0x69, 0x78, 0x78, #1915 
    0x96, 0xA5, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, #1916 
    0x95, 0xB4, 0x96, 0xA6, 0x96, 0x97, 0x78, 0x79, 0x78, 0x69, 0x78, 0x87, #1917 
    0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x77, #1918 
    0x96, 0xA5, 0x97, 0x96, 0x97, 0x87, 0x79, 0x79, 0x69, 0x69, 0x78, 0x78, #1919 
    0x96, 0xA5, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, #1920 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x78, 0x79, 0x78, 0x69, 0x78, 0x87, #1921 
    0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x77, #1922 
    0x96, 0xA4, 0x96, 0x96, 0x97, 0x87, 0x79, 0x79, 0x69, 0x69, 0x78, 0x78, #1923 
    0x96, 0xA5, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, #1924 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x78, 0x79, 0x78, 0x69, 0x78, 0x87, #1925 
    0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, #1926 
    0x96, 0xA4, 0x96, 0x96, 0x97, 0x87, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78, #1927 
    0x96, 0xA5, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, #1928 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, #1929 
    0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, #1930 
    0x96, 0xA4, 0x96, 0x96, 0x97, 0x87, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78, #1931 
    0x96, 0xA5, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, #1932 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, #1933 
    0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, #1934 
    0x96, 0xA4, 0x96, 0x96, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78, #1935 
    0x96, 0xA5, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, #1936 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, #1937 
    0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, #1938 
    0x96, 0xA4, 0x96, 0x96, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78, #1939 
    0x96, 0xA5, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, #1940 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, #1941 
    0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, #1942 
    0x96, 0xA4, 0x96, 0x96, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78, #1943 
    0x96, 0xA5, 0x96, 0xA5, 0xA6, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, #1944 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, #1945 
    0x95, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x78, 0x69, 0x78, 0x77, #1946 
    0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78, #1947 
    0x96, 0xA5, 0xA6, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, #1948 
    0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x79, 0x78, 0x79, 0x77, 0x87, #1949 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x78, 0x79, 0x78, 0x69, 0x78, 0x77, #1950 
    0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78, #1951 
    0x96, 0xA5, 0xA6, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, #1952 
    0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, #1953 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x78, 0x79, 0x78, 0x68, 0x78, 0x87, #1954 
    0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, #1955 
    0x96, 0xA5, 0xA5, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, #1956 
    0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, #1957 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, #1958 
    0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, #1959 
    0x96, 0xA4, 0xA5, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, #1960 
    0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, #1961 
    0x96, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, #1962 
    0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, #1963 
    0x96, 0xA4, 0xA5, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, #1964 
    0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, #1965 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, #1966 
    0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, #1967 
    0x96, 0xA4, 0xA5, 0xA5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, #1968 
    0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, #1969 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, #1970 
    0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, #1971 
    0x96, 0xA4, 0xA5, 0xA5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, #1972 
    0xA5, 0xB5, 0x96, 0xA5, 0xA6, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, #1973 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, #1974 
    0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x78, 0x69, 0x78, 0x77, #1975 
    0x96, 0xA4, 0xA5, 0xB5, 0xA6, 0xA6, 0x88, 0x89, 0x88, 0x78, 0x87, 0x87, #1976 
    0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, #1977 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x78, 0x87, #1978 
    0x96, 0xB4, 0x96, 0xA6, 0x96, 0x97, 0x78, 0x79, 0x78, 0x69, 0x78, 0x77, #1979 
    0x96, 0xA4, 0xA5, 0xB5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, #1980 
    0xA5, 0xB4, 0x96, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x77, 0x87, #1981 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, #1982 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x78, 0x79, 0x78, 0x69, 0x78, 0x77, #1983 
    0x96, 0xB4, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x87, #1984 
    0xA5, 0xB4, 0xA6, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, #1985 
    0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, #1986 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x79, 0x78, 0x69, 0x78, 0x87, #1987 
    0x96, 0xB4, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86, #1988 
    0xA5, 0xB4, 0xA5, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, #1989 
    0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, #1990 
    0x95, 0xB4, 0x96, 0xA5, 0x86, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, #1991 
    0x96, 0xB4, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86, #1992 
    0xA5, 0xB3, 0xA5, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, #1993 
    0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, #1994 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x76, 0x78, 0x69, 0x78, 0x87, #1995 
    0x96, 0xB4, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86, #1996 
    0xA5, 0xB3, 0xA5, 0xA5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, #1997 
    0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, #1998 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, #1999 
    0x96, 0xB4, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86, #2000 
    0xA5, 0xB3, 0xA5, 0xA5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, #2001 
    0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, #2002 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, #2003 
    0x96, 0xB4, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86, #2004 
    0xA5, 0xB3, 0xA5, 0xA5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, #2005 
    0xA5, 0xB4, 0x96, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, #2006 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, #2007 
    0x96, 0xB4, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x87, 0x78, 0x87, 0x86, #2008 
    0xA5, 0xB3, 0xA5, 0xB5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, #2009 
    0xA5, 0xB4, 0x96, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, #2010 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x78, 0x87, #2011 
    0x96, 0xB4, 0xA5, 0xB5, 0xA5, 0xA6, 0x87, 0x88, 0x87, 0x78, 0x87, 0x86, #2012 
    0xA5, 0xB3, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x87, #2013 
    0xA5, 0xB4, 0x96, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, #2014 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, #2015 
    0x95, 0xB4, 0xA5, 0xB4, 0xA5, 0xA6, 0x87, 0x88, 0x87, 0x78, 0x87, 0x86, #2016 
    0xA5, 0xC3, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x87, #2017 
    0xA5, 0xB4, 0xA6, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, #2018 
    0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, #2019 
    0x95, 0xB4, 0xA5, 0xB4, 0xA5, 0xA6, 0x97, 0x87, 0x87, 0x78, 0x87, 0x86, #2020 
    0xA5, 0xC3, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86, #2021 
    0xA5, 0xB4, 0xA5, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, #2022 
    0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, #2023 
    0x95, 0xB4, 0xA5, 0xB4, 0xA5, 0xA6, 0x97, 0x87, 0x87, 0x78, 0x87, 0x96, #2024 
    0xA5, 0xC3, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86, #2025 
    0xA5, 0xB3, 0xA5, 0xA5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, #2026 
    0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, #2027 
    0x95, 0xB4, 0xA5, 0xB4, 0xA5, 0xA6, 0x97, 0x87, 0x87, 0x78, 0x87, 0x96, #2028 
    0xA5, 0xC3, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86, #2029 
    0xA5, 0xB3, 0xA5, 0xA5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, #2030 
    0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, #2031 
    0x95, 0xB4, 0xA5, 0xB4, 0xA5, 0xA6, 0x97, 0x87, 0x87, 0x78, 0x87, 0x96, #2032 
    0xA5, 0xC3, 0xA5, 0xB5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x86, #2033 
    0xA5, 0xB3, 0xA5, 0xA5, 0xA6, 0xA6, 0x88, 0x78, 0x88, 0x78, 0x87, 0x87, #2034 
    0xA5, 0xB4, 0x96, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, #2035 
    0x95, 0xB4, 0xA5, 0xB4, 0xA5, 0xA6, 0x97, 0x87, 0x87, 0x78, 0x87, 0x96, #2036 
    0xA5, 0xC3, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86, #2037 
    0xA5, 0xB3, 0xA5, 0xA5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, #2038 
    0xA5, 0xB4, 0x96, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, #2039 
    0x95, 0xB4, 0xA5, 0xB4, 0xA5, 0xA6, 0x97, 0x87, 0x87, 0x78, 0x87, 0x96, #2040 
    0xA5, 0xC3, 0xA5, 0xB5, 0xA5, 0xA6, 0x87, 0x88, 0x87, 0x78, 0x87, 0x86, #2041 
    0xA5, 0xB3, 0xA5, 0xB5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, #2042 
    0xA5, 0xB4, 0x96, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, #2043 
    0x95, 0xB4, 0xA5, 0xB4, 0xA5, 0xA6, 0x97, 0x87, 0x87, 0x88, 0x87, 0x96, #2044 
    0xA5, 0xC3, 0xA5, 0xB4, 0xA5, 0xA6, 0x87, 0x88, 0x87, 0x78, 0x87, 0x86, #2045 
    0xA5, 0xB3, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x87, #2046 
    0xA5, 0xB4, 0x96, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, #2047 
    0x95, 0xB4, 0xA5, 0xB4, 0xA5, 0xA5, 0x97, 0x87, 0x87, 0x88, 0x86, 0x96, #2048 
    0xA4, 0xC3, 0xA5, 0xA5, 0xA5, 0xA6, 0x97, 0x87, 0x87, 0x78, 0x87, 0x86, #2049 
    0xA5, 0xC3, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x78, 0x78, 0x87, 0x87); #2050 
    
def get_lunar_feast_index(n_gre_year,n_gre_month,n_gre_day):
    """
    Calculate the index of a lunar feast based on the provided Gregorian date.

    Parameters:
    - gregorian_year (int): The Gregorian year.
    - gregorian_month (int): The Gregorian month.
    - gregorian_day (int): The Gregorian day.

    Returns:
    int or None: The index of the lunar feast (1 or 2) or None if the date is invalid.


    The function uses a lookup table to determine the boundaries of lunar feasts for each month.
    It then calculates the index based on the provided Gregorian date.
    """
    # Lookup table for lunar days
    flag_1 = get_lunar_day[(n_gre_year-1901)*12+n_gre_month-1]
    # Extract boundaries for lunar feasts
    bound_1 = 15 - (flag_1 >> 4) & 0xf
    bound_2 = 15 + (flag_1 & 0x0f)

    # Determine the index of the lunar feast
    if n_gre_day < bound_1:
        n = -1
    elif (n_gre_day >= bound_1) and (n_gre_day < bound_2):
        n = 0
    elif n_gre_day >= bound_2:
        n = 1
    else:
        # Invalid date
        return None
    # Calculate the overall index
    return (n_gre_month-1)*2+n+1

def get_feast_date(feast,year):
    """
    Calculate the date of a specific lunar feast in a given year.

    Parameters:
    - feast (str): The name of the lunar feast.
    - year (int): The Gregorian year.

    Returns:
    list: A list containing the Gregorian year, month, and day of the lunar feast.

    The function uses a predefined list of lunar feasts and a lookup table to calculate the date of the feast.
    """
    # List of lunar feast names
    hol_text = ("小寒","大寒","立春","雨水", 
		"惊蛰","春分","清明","谷雨", 
		"立夏","小满","芒种","夏至", 
		"小暑","大暑","立秋","处暑", 
		"白露","秋分","寒露","霜降", 
		"立冬","小雪","大雪","冬至")
    # Check if the feast index is even (first feast in the month)
    if hol_text.index(feast) % 2 == 0:# no.1
         month = int((hol_text.index(feast)+2) / 2)
         feast_index = (year - 1901) * 12 + month -1
         data = get_lunar_day[feast_index]
         day = 15 - (data >> 4) & 0xf
   
         
    else:
        # Feast index is odd (second feast in the month)
        month = int((hol_text.index(feast) + 1) / 2)
        feast_index = (year - 1901) * 12 + month -1
        data = get_lunar_day[feast_index]
        day = 15 + (data & 0x0f)

    # Return the date of the lunar feast
    return [year,month,day]

def get_24lunar_feast(birth):
    """
    Calculate the 24 solar terms and associated lunar months based on a given birthdate.

    Parameters:
    - birth (list): A list containing the birthdate in the format [year, month, day].

    Returns:
    tuple: A tuple containing the 24 solar term and the associated lunar month.

    The function calculates the 24 solar terms and the associated lunar months for a given birthdate.
    """
    n_gre_year = birth[0]
    n_gre_month = birth[1]
    n_gre_day = birth[2]
     # List of lunar feast names
    hol_text = ("小寒","大寒","立春","雨水", 
		"惊蛰","春分","清明","谷雨", 
		"立夏","小满","芒种","夏至", 
		"小暑","大暑","立秋","处暑", 
		"白露","秋分","寒露","霜降", 
		"立冬","小雪","大雪","冬至")
    # Get the index of the lunar feast
    holi_index = get_lunar_feast_index(n_gre_year, n_gre_month, n_gre_day)
    s_feast = hol_text[holi_index-1]
    n_feast_month = 0
    # Iterate through days to find the lunar month associated with each solar term
    for n in range(1,31):
        str_Hol = hol_text[get_lunar_feast_index(n_gre_year, n_gre_month, n) -1]
        
        if not str_Hol == '':
            
            if str_Hol == u"立春":
                if n_gre_day >= n: n_feast_month = 13#当天在立春后
                else:n_feast_month = 14                   #当天在立春前
                break
            if str_Hol == u"惊蛰":
                if n_gre_day >= n: n_feast_month = 2#当天在惊蛰后
                else: n_feast_month = 1                  #当天在惊蛰前（下同）
                break         
            if str_Hol == u"清明":
                if n_gre_day >= n: n_feast_month = 3
                else: n_feast_month = 2
                break  
            if str_Hol == u"立夏":
                if n_gre_day >= n: n_feast_month = 4
                else: n_feast_month = 3
                break  
            if str_Hol == u"芒种":
                if n_gre_day >= n: n_feast_month = 5
                else: n_feast_month = 4
                break  
            if str_Hol == u"小暑":
                if n_gre_day >= n: n_feast_month = 6
                else: n_feast_month = 5
                break  
            if str_Hol == u"立秋":
                if n_gre_day >= n: n_feast_month = 7
                else: n_feast_month = 6
                break  
            if str_Hol == u"白露":
                if n_gre_day >= n: n_feast_month = 8
                else: n_feast_month = 7
                break  
            if str_Hol == u"寒露":
                if n_gre_day >= n: n_feast_month = 9
                else: n_feast_month = 8
                break  
            if str_Hol == u"立冬":
                if n_gre_day >= n: n_feast_month = 10
                else: n_feast_month = 9
                break  
            if str_Hol == u"大雪":
                if n_gre_day >= n: n_feast_month = 11
                else: n_feast_month = 10
                break  
            if str_Hol == u"小寒":
                if n_gre_day >= n: n_feast_month = 12
                else: n_feast_month = 11
                break  
    # Return the 24 solar term and associated lunar month
    return (s_feast,n_feast_month)

def days_between_dates( date1: str, date2: str) -> int:
    """
    Calculate the number of days between two given dates.

    Parameters:
    - date1 (str): The first date in the format 'YYYY-MM-DD'.
    - date2 (str): The second date in the format 'YYYY-MM-DD'.

    Returns:
    int: The absolute number of days between the two dates.

    The function converts the input date strings to datetime objects and calculates the absolute
    difference in days between the two dates.
    """
    # Convert date strings to datetime objects
    a = datetime.datetime.strptime(date1, '%Y-%m-%d')
    b = datetime.datetime.strptime(date2, '%Y-%m-%d')
    # Calculate the absolute difference in days
    result = abs((a-b).days)
    return result 

def get_days_diff(birth):
    """
    Calculate the number of days between a given birthdate and the nearest lunar feast.

    Parameters:
    - birth (tuple): A tuple representing the birthdate in the format (year, month, day).

    Returns:
    int: The number of days between the birthdate and the nearest lunar feast.

    The function determines the nearest lunar feast, considers the birth year adjustment for the
    '小寒' case, and calculates the number of days between the birthdate and the feast date.
    """
    
    hol_text = ("小寒","大寒","立春","雨水", 
		"惊蛰","春分","清明","谷雨", 
		"立夏","小满","芒种","夏至", 
		"小暑","大暑","立秋","处暑", 
		"白露","秋分","寒露","霜降", 
		"立冬","小雪","大雪","冬至")
     
    feast = get_24lunar_feast(birth)
    feast = feast[0]
    # Ensure the feast index stays within bounds
    feast = hol_text[int((hol_text.index(feast) + 1) % len(hol_text))]
    year = birth[0]
     # Adjust the year for the '小寒' case in December
     
    if (feast == '小寒') and (birth[1] == 12 ):
        year += 1
    # Get the date of the nearest lunar feast
    near_date = get_feast_date(feast,year)
    
   # Convert birthdate and feast date to string format
    y_1 = birth[0]
    m_1 = birth[1]
    d_1 = birth[2]
    birth_date = str(y_1) + '-' + str(m_1) + '-' + str(d_1)
    
    y_2 = near_date[0]
    m_2 = near_date[1]
    d_2 = near_date[2]
    near_date = str(y_2) + '-' + str(m_2) + '-' + str(d_2)

    # Calculate the number of days between the birthdate and the feast date
    diff_between = days_between_dates(birth_date,near_date)
    
    return diff_between

